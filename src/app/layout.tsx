// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import './globals.css';

// import HeaderTop from "@/components/HeaderTop";
// import HeaderMain from "@/components/HeaderMain";
// import Navbar from "@/components/Navbar";
// import Footer from "@/components/Footer";
// import NewProducts from "@/components/NewProducts";

// // ðŸ§  Auth Context Provider & Modals
// import { AuthModalProvider } from "@/components/context/AuthModalContext";
// import SignInModal from "@/components/modals/SignInModal";
// import SignupModal from "@/components/modals/SignupModal";

// import "slick-carousel/slick/slick.css";
// import "slick-carousel/slick/slick-theme.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
// <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
//   <AuthModalProvider>
//     <HeaderTop />
//     <HeaderMain />
//     <Navbar />
//     {children}
//     <NewProducts />
//     <Footer />
//     <SignupModal /> 
//     <SignInModal />   
//   </AuthModalProvider>
// </body>
//     </html>
//   );
// }

// Remove "use client" here
// src/app/layout.tsx
// src/app/layout.tsx


//new correct starts here
// "use client";

// import React, { useState } from "react";
// import { metadata } from './config/metadata';
// import { Geist, Geist_Mono } from "next/font/google";
// import './globals.css';
// import HeaderTop from "@/components/HeaderTop";
// import HeaderMain from "@/components/HeaderMain";
// import Navbar from "@/components/Navbar";
// import Footer from "@/components/Footer";
// import NewProducts from "@/components/NewProducts";
// import { AuthModalProvider } from "@/components/context/AuthModalContext"; // Auth modal provider
// import { AuthProvider } from "@/context/AuthContext"; // Auth provider for authentication context
// import SignInModal from "@/components/modals/SignInModal";
// import SignupModal from "@/components/modals/SignupModal";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const [isSignInOpen, setSignInOpen] = useState(false);
//   const [isSignUpOpen, setSignUpOpen] = useState(false);

//   const openSignInModal = () => setSignInOpen(true);
//   const closeSignInModal = () => setSignInOpen(false);
//   const openSignUpModal = () => setSignUpOpen(true);
//   const closeSignUpModal = () => setSignUpOpen(false);

//   return (
//     <html lang="en">
//       <head>
//         <meta name="description" content={metadata.description || ''} />
//         <title>{String(metadata.title || '')}</title>
//       </head>
//       <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
//         {/* Wrap the entire layout with AuthProvider */}
//         <AuthProvider>
//           {/* Other Providers */}
//           <AuthModalProvider>
//             <HeaderTop />
//             <HeaderMain />
//             <Navbar />
//             {children}
//             <NewProducts />
//             <Footer />
//             <SignupModal isOpen={isSignUpOpen} closeModal={closeSignUpModal} />
//             <SignInModal isOpen={isSignInOpen} closeModal={closeSignInModal} />
//           </AuthModalProvider>
//         </AuthProvider>
//       </body>
//     </html>
//   );
// }


"use client";

import React, { useState } from "react";
import { metadata } from './config/metadata';
import { Geist, Geist_Mono } from "next/font/google";
import './globals.css';
import { Provider } from 'react-redux';  // Import the Provider from react-redux
import { store } from '@/store/store';  // Import the Redux store
import HeaderTop from "@/components/HeaderTop";
import HeaderMain from "@/components/HeaderMain";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import NewProducts from "@/components/NewProducts";
import { AuthModalProvider } from "@/components/context/AuthModalContext";
import { AuthProvider } from "@/context/AuthContext";
import SignInModal from "@/components/modals/SignInModal";
import SignupModal from "@/components/modals/SignupModal";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isSignInOpen, setSignInOpen] = useState(false);
  const [isSignUpOpen, setSignUpOpen] = useState(false);

  const openSignInModal = () => setSignInOpen(true);
  const closeSignInModal = () => setSignInOpen(false);
  const openSignUpModal = () => setSignUpOpen(true);
  const closeSignUpModal = () => setSignUpOpen(false);

  return (
    <html lang="en">
      <head>
        <meta name="description" content={metadata.description || ''} />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{String(metadata.title || '')}</title>
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Provider store={store}>  {/* Wrap your app with the Redux Provider */}
          <AuthProvider>
            <AuthModalProvider>
              <HeaderTop />
              <HeaderMain />
              <Navbar />
              {children}
              <NewProducts />
              <Footer />
              <SignupModal isOpen={isSignUpOpen} closeModal={closeSignUpModal} />
              <SignInModal isOpen={isSignInOpen} closeModal={closeSignInModal} />
            </AuthModalProvider>
          </AuthProvider>
        </Provider>

      </body>
    </html>
  );
}
